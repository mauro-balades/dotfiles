"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const path = require("path");
const javascript_1 = require("../javascript");
const languageModelCache_1 = require("../../languageModelCache");
const embeddedSupport_1 = require("../../embeddedSupport");
const script_integration_1 = require("./script-integration");
const workspace = path.resolve(__dirname, '../../../../test/fixtures/');
const documentRegions = languageModelCache_1.getLanguageModelCache(10, 60, document => embeddedSupport_1.getDocumentRegions(document));
const scriptMode = javascript_1.getJavascriptMode(documentRegions, workspace);
function check(file, expected) {
    const filename = path.join(workspace + '/component/template-checking/', file);
    const doc = script_integration_1.createTextDocument(filename);
    const diagnostics = scriptMode.doTemplateValidation(doc);
    assert.equal(diagnostics.length, expected.length, 'diagnostic count');
    diagnostics.forEach((diag, i) => {
        const e = expected[i];
        assert(diag.message.includes(e.includes), 'diagnostic message - index: ' + i);
        assert.deepEqual(diag.range, e.range, 'diagnostic range of \'' + diag.message + '\'');
    });
}
suite('template integrated test', () => {
    test('validate: expression.vue', () => {
        check('expression.vue', [
            {
                includes: 'Property \'messaage\' does not exist',
                range: {
                    start: { line: 1, character: 8 },
                    end: { line: 1, character: 16 }
                }
            }
        ]);
    });
    test('validate: v-for.vue', () => {
        check('v-for.vue', [
            {
                includes: 'Property \'notExists\' does not exist',
                range: {
                    start: { line: 5, character: 15 },
                    end: { line: 5, character: 24 }
                }
            }
        ]);
    });
    test('validate: object-literal.vue', () => {
        check('object-literal.vue', [
            {
                includes: 'Property \'bar\' does not exist',
                range: {
                    start: { line: 3, character: 9 },
                    end: { line: 3, character: 12 }
                }
            }
        ]);
    });
    test('validate: v-on.vue', () => {
        check('v-on.vue', [
            {
                includes: 'Argument of type \'Event\' is not assignable to parameter of type \'string\'',
                range: {
                    start: { line: 9, character: 20 },
                    end: { line: 9, character: 30 }
                }
            },
            {
                includes: 'Argument of type \'123\' is not assignable to parameter of type \'string\'',
                range: {
                    start: { line: 10, character: 31 },
                    end: { line: 10, character: 34 }
                }
            },
            {
                includes: 'Type \'"test"\' is not assignable to type \'number\'',
                range: {
                    start: { line: 11, character: 20 },
                    end: { line: 11, character: 24 }
                }
            }
        ]);
    });
});
//# sourceMappingURL=template-integration.js.map