(()=>{"use strict";var e={n:t=>{var o=t&&t.__esModule?()=>t.default:()=>t;return e.d(o,{a:o}),o},d:(t,o)=>{for(var i in o)e.o(o,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:o[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{activate:()=>H,deactivate:()=>F,extension:()=>M});const o=process.platform.startsWith("win"),i="darwin"==process.platform,s=["llvm-vs-code-extensions.vscode-clangd","vsciot-vscode.vscode-arduino","vscode-openapi"],n=require("vscode");var r=e.n(n);const a=require("platformio-node-helpers"),c=require("platformio-vscode-debug"),l=require("os");var d=e.n(l);async function m(e,t){const o=t.stack||t.toString(),i=`# Description of problem\n  Leave a comment...\n\n  BEFORE SUBMITTING, PLEASE SEARCH FOR DUPLICATES IN\n  - https://github.com/platformio/platformio-vscode-ide/issues?q=is%3Aissue+\n\n  # Configuration\n\n  VSCode: ${r().version}\n  PIO IDE: v${h()}\n  System: ${d().type()}, ${d().release()}, ${d().arch()}\n\n  # Exception\n  \`\`\`\n  ${o}\n  \`\`\`\n  `,s=a.misc.getErrorReportUrl(e,i);let n="Report a problem";s.includes("issues/new")||(n="Check available solutions"),await r().window.showErrorMessage(o.substring(0,700)+"...",n)===n&&r().commands.executeCommand("vscode.open",r().Uri.parse(s)),console.error(t)}function h(){return r().extensions.getExtension("platformio.platformio-ide").packageJSON.version}const p=require("fs-plus");var u,g,f,w=e.n(p);function v(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}class P{constructor(){v(this,"STATUS_TRY_AGAIN",0),v(this,"STATUS_ABORT",1),v(this,"STATUS_CUSTOMEXE",2)}async prompt(){const e=await r().window.showInformationMessage("PlatformIO: Can not find working Python 3.6+ Interpreter. Please install the latest Python 3 and restart VSCode",{title:"Install Python",isCloseAffordance:!1},{title:"I have Python",isCloseAffordance:!1},{title:"Try again",isCloseAffordance:!1},{title:"Abort PlatformIO IDE Installation",isCloseAffordance:!0});let t,o={status:this.STATUS_TRY_AGAIN};switch(e?e.title:void 0){case"Install Python":r().commands.executeCommand("vscode.open",r().Uri.parse("http://docs.platformio.org/page/faq.html#install-python-interpreter"));break;case"I have Python":t=await r().window.showInputBox({prompt:"Please specify a full path to Python executable file",placeHolder:"Full path to python/python.exe",validateInput:e=>w().isFileSync(e)?null:"Invalid path to Python Interpreter"}),t&&(o={status:this.STATUS_CUSTOMEXE,pythonExecutable:t});break;case"Abort PlatformIO IDE Installation":o={status:this.STATUS_ABORT}}return o}}class b{constructor(e,t="miscStates"){this._globalState=e,this._stateKey=t}getState(){try{return this._globalState.get(this._stateKey)||{}}catch(e){return{}}}getValue(e){return(this.getState()||{})[e]}setValue(e,t){const o=this.getState();o[e]=t,this._globalState.update(this._stateKey,o)}}function T(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}class S{constructor(e,t=!1){T(this,"LOCK_TIMEOUT",6e4),T(this,"LOCK_KEY","platformio-ide:installer-lock"),T(this,"STORAGE_STATE_KEY","platformio-ide:installer-state"),this.globalState=e,this.stateStorage=new b(e,this.STORAGE_STATE_KEY);const o=r().workspace.getConfiguration("platformio-ide");this.stages=[new a.installer.PlatformIOCoreStage(this.stateStorage,this.onDidStatusChange.bind(this),{pioCoreVersionSpec:">=5.1",useBuiltinPython:o.get("useBuiltinPython"),useBuiltinPIOCore:o.get("useBuiltinPIOCore"),useDevelopmentPIOCore:o.get("useDevelopmentPIOCore"),pythonPrompt:new P,disableAutoUpdates:t})]}onDidStatusChange(){this.locked()&&this.lock()}lock(){return this.globalState.update(this.LOCK_KEY,(new Date).getTime())}unlock(){return this.globalState.update(this.LOCK_KEY,void 0)}locked(){const e=this.globalState.get(this.LOCK_KEY);return!!e&&(new Date).getTime()-parseInt(e)<=this.LOCK_TIMEOUT}async check(){let e=!0;for(const t of this.stages)try{await t.check()||(e=!1)}catch(t){e=!1,console.warn(t)}return e}async install(e){const t=100/this.stages.length;for(const o of this.stages)await o.install(((o,i)=>{e.report({message:o,increment:t*(i/100)})}));e.report({message:"Finished! Please restart VSCode.",increment:100})}destroy(){return this.stages.map((e=>e.destroy()))}}class C{constructor(e,t,o,i){this.id=e,this.envs=t,this.tasks=o,this.activeEnvName=i,this.multiEnvProject=this.envs.length>1}getTreeItem(e){return e instanceof n.TreeItem?e:this.taskToTreeItem(e)}taskToTreeItem(e){const t=new n.TreeItem(e.name);return t.iconPath=new n.ThemeIcon("circle-outline"),t.tooltip=e.title,t.command={title:e.title,command:"platformio-ide.privateRunTask",arguments:[e]},!e.coreEnv&&e.multienv&&this.multiEnvProject&&(t.label+=" All"),t}getChildren(e){return e&&e.group?this.getEnvGroupChildren(e.env,e.group):e?this.getEnvChildren(e.env):this.getRootChildren()}getRootChildren(){const e=[];for(const t of[void 0,...this.envs.map((e=>e.name))]){const o=new n.TreeItem(t||C.DEFAULT_ENV_NAME,!t||t!==this.activeEnvName&&this.multiEnvProject?n.TreeItemCollapsibleState.Collapsed:n.TreeItemCollapsibleState.Expanded);o.id=`${this.id}-${t}`,o.env=t,o.iconPath=new n.ThemeIcon("root-folder"),e.push(o)}return e}getEnvGroupChildren(e,t){return this.tasks.filter((o=>o.coreEnv===e&&o.group===t))}getEnvChildren(e){const t=this.tasks.filter((t=>t.coreEnv===e));if(!t.length)return[new n.TreeItem("Loading...")];const o=t.filter((e=>!e.group));for(const i of this.getTaskGroups(t)){const t=new n.TreeItem(i,["General","Platform"].includes(i)?n.TreeItemCollapsibleState.Expanded:n.TreeItemCollapsibleState.Collapsed);t.env=e,t.group=i,t.iconPath=n.ThemeIcon.Folder,o.push(t)}return o}getTaskGroups(e){const t=["General"],o=e.filter((e=>e.group)).map((e=>e.group));o.includes("Platform")&&t.push("Platform");for(const e of o)t.includes(e)||t.push(e);return t}}function E(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}f="Default",(g="DEFAULT_ENV_NAME")in(u=C)?Object.defineProperty(u,g,{value:f,enumerable:!0,configurable:!0,writable:!0}):u[g]=f;class I{constructor(e,t){this.projectDir=e,this.projectObserver=t,this.subscriptions=[],this._sid=Math.random(),this._refreshTimeout=void 0,this._restoreOnDidEndTask=void 0,this._tasksToRestore=[],this.refresh()}dispose(){a.misc.disposeSubscriptions(this.subscriptions)}requestRefresh(){this._refreshTimeout&&clearTimeout(this._refreshTimeout),this._refreshTimeout=setTimeout(this.refresh.bind(this),I.AUTO_REFRESH_DELAY)}async refresh({force:e=!1}={}){this.dispose(),e&&(this.projectObserver.resetCache(),this._sid=Math.random());const t=await this.projectObserver.getProjectEnvs(),o=[...await this.projectObserver.getDefaultTasks()];for(const e of t)o.push(...await this.projectObserver.getLoadedEnvTasks(e.name)||[]);const i=r().window.createTreeView(I.TASKS_VIEW_ID,{treeDataProvider:new C(this._sid,t,o,this.projectObserver.getActiveEnvName()),showCollapseAll:!0});this.subscriptions.push(i,i.onDidExpandElement((async({element:e})=>{e.env&&await this.onDidRequestEnvTasks(e.env)})),r().tasks.registerTaskProvider(I.PROVIDER_TYPE,{provideTasks:async()=>o.map((e=>this.toVSCodeTask(e))),resolveTask:()=>{}}),r().tasks.onDidEndTaskProcess((e=>this.onDidEndTaskProcess(e)))),this.registerTaskBasedCommands(o),r().commands.executeCommand("setContext","pioMultiEnvProject",t.length>1)}async onDidRequestEnvTasks(e){if(!await this.projectObserver.getLoadedEnvTasks(e))return await this.projectObserver.loadEnvTasks(e),this.requestRefresh()}toVSCodeTask(e){const t=Object.create(process.env);process.env.PLATFORMIO_PATH&&(t.PATH=process.env.PLATFORMIO_PATH,t.Path=process.env.PLATFORMIO_PATH);const i=new(r().Task)({type:I.PROVIDER_TYPE,task:e.id},r().workspace.getWorkspaceFolder(r().Uri.file(this.projectDir)),e.title,I.PROVIDER_TYPE,new(r().ProcessExecution)(o?"platformio.exe":"platformio",e.args,{cwd:this.projectDir,env:t}),"$platformio");return i.presentationOptions={panel:r().TaskPanelKind.Dedicated},e.isBuild()?i.group=r().TaskGroup.Build:e.isClean()?i.group=r().TaskGroup.Clean:e.isTest()&&(i.group=r().TaskGroup.Test),i}runTask(e){this._restoreOnDidEndTask=void 0,this._tasksToRestore=[],this._autoCloseSerialMonitor(e),this._tasksToRestore.some((e=>this.isMonitorAndUploadTask(e)))&&this.isMonitorAndUploadTask(e)||r().commands.executeCommand("workbench.action.tasks.runTask",{type:I.PROVIDER_TYPE,task:e.id})}_autoCloseSerialMonitor(e){[M.getSetting("autoCloseSerialMonitor"),["upload","test"].some((t=>e.args.includes(t)))].every((e=>e))&&(this._restoreOnDidEndTask=e,r().tasks.taskExecutions.forEach((t=>{const o=this.isMonitorAndUploadTask(t.task);[t.task.definition.type!==I.PROVIDER_TYPE,!t.task.execution.args.includes("monitor"),this.areTasksEqual(e,t.task)&&!o].some((e=>e))||((o||["device","monitor"].every((e=>t.task.execution.args.includes(e))))&&this._tasksToRestore.push(t.task),t.terminate())})))}onDidEndTaskProcess(e){[!this._restoreOnDidEndTask,e.execution.task.definition.type!==I.PROVIDER_TYPE,0!==e.exitCode&&!this.isMonitorAndUploadTask(e.execution.task),this.areTasksEqual(this._restoreOnDidEndTask,e.execution.task)].some((e=>e))||(this._restoreOnDidEndTask=void 0,setTimeout((()=>{for(;this._tasksToRestore.length;)r().tasks.executeTask(this._tasksToRestore.pop())}),parseInt(M.getSetting("reopenSerialMonitorDelay"))))}isMonitorAndUploadTask(e){const t=e.args||e.execution.args;return["--target","upload","monitor"].every((e=>t.includes(e)))}areTasksEqual(e,t){return e&&t?(e.args||e.execution.args)===(t.args||t.execution.args):e===t}registerTaskBasedCommands(e){const t=t=>{const o=e.filter((e=>e.name===t&&e.coreEnv===this.projectObserver.getActiveEnvName()));this.runTask(o[0])};this.subscriptions.push(r().commands.registerCommand("platformio-ide.build",(()=>{if(M.getSetting("buildTask"))return r().commands.executeCommand("workbench.action.tasks.runTask",M.getSetting("buildTask"));t("Build")})),r().commands.registerCommand("platformio-ide.upload",(()=>t(M.getSetting("forceUploadAndMonitor")?"Upload and Monitor":"Upload"))),r().commands.registerCommand("platformio-ide.test",(()=>t("Test"))),r().commands.registerCommand("platformio-ide.clean",(()=>t("Clean"))),r().commands.registerCommand("platformio-ide.serialMonitor",(()=>t("Monitor"))),r().commands.registerCommand("platformio-ide.remoteUpload",(()=>t("Remote Upload"))))}}E(I,"PROVIDER_TYPE","PlatformIO"),E(I,"TASKS_VIEW_ID","platformio-ide.projectTasks"),E(I,"AUTO_REFRESH_DELAY",500);const O=require("fs");var k=e.n(O);const _=require("path");var y=e.n(_);class D{constructor(){this._persistentState=new b(M.context.globalState,"projects"),this._taskManager=void 0,this._sbEnvSwitcher=void 0,this._pool=new a.project.ProjectPool({ide:"vscode",api:{createFileSystemWatcher:r().workspace.createFileSystemWatcher,createDirSystemWatcher:e=>r().workspace.createFileSystemWatcher(y().join(e,"*")),withIndexRebuildingProgress:e=>r().window.withProgress({location:{viewId:r().ProgressLocation.Window},title:"PlatformIO: Rebuilding IntelliSense Index"},e),withTasksLoadingProgress:e=>r().window.withProgress({location:{viewId:I.TASKS_VIEW_ID}},(async()=>await r().window.withProgress({location:{viewId:r().ProgressLocation.Window},title:"PlatformIO: Loading tasks..."},e))),onDidChangeProjectConfig:e=>{this._taskManager&&this._taskManager.projectDir===e&&this._taskManager.requestRefresh(),this.saveActiveProjectState()},onDidNotifyError:m.bind(this)},settings:{autoPreloadEnvTasks:M.getSetting("autoPreloadEnvTasks"),autoRebuild:M.getSetting("autoRebuildAutocompleteIndex")}}),this.subscriptions=[this._pool,r().window.onDidChangeActiveTextEditor((()=>{if(!M.getSetting("activateProjectOnTextEditorChange"))return;const e=this.getActiveEditorProjectDir();e&&this.switchToProject(e)})),r().workspace.onDidChangeWorkspaceFolders((()=>this.switchToProject(this.findActiveProjectDir()))),r().commands.registerCommand("platformio-ide.rebuildProjectIndex",(()=>this._pool.getActiveObserver().rebuildIndex({force:!0}))),r().commands.registerCommand("platformio-ide.refreshProjectTasks",(()=>this._taskManager.refresh({force:!0}))),r().commands.registerCommand("platformio-ide.privateRunTask",(e=>this._taskManager.runTask(e)))],this.registerEnvSwitcher(),this.switchToProject(this.findActiveProjectDir())}dispose(){a.misc.disposeSubscriptions(this.subscriptions)}static isPIOProjectSync(e){try{return k().accessSync(y().join(e,"platformio.ini")),!0}catch(e){}return!1}static getPIOProjectDirs(){return(r().workspace.workspaceFolders||[]).map((e=>e.uri.fsPath)).filter((e=>D.isPIOProjectSync(e)))}findActiveProjectDir(){let e;return M.getSetting("activateProjectOnTextEditorChange")&&(e=this.getActiveEditorProjectDir()),e||this.getSelectedProjectDir()}getSelectedProjectDir(){const e=D.getPIOProjectDirs(),t=this._pool.getActiveProjectDir();if(e.length<1)return;if(t&&e.find((e=>e===t)))return t;const o=this._persistentState.getValue("lastProjectDir");return o&&e.find((e=>e===o))?o:e[0]}getActiveEditorProjectDir(){if(D.getPIOProjectDirs().length<1)return;const e=r().window.activeTextEditor;if(!e)return;const t=e.document.uri;if("file"!==t.scheme)return;const o=r().workspace.getWorkspaceFolder(t);return o&&D.isPIOProjectSync(o.uri.fsPath)?o.uri.fsPath:void 0}loadProjectStateItem(e,t){return((this._persistentState.getValue("projects")||{})[e]||{})[t]}saveProjectStateItem(e,t,o){const i=this._persistentState.getValue("projects")||{};i[e]||(i[e]={}),i[e][t]=o;for(const e of Object.keys(i))D.isPIOProjectSync(e)||delete i[e];this._persistentState.setValue("projects",i),this._persistentState.setValue("lastProjectDir",e)}saveActiveProjectState(){const e=this._pool.getActiveObserver();e&&this.saveProjectStateItem(e.projectDir,"activeEnv",e.getActiveEnvName())}async switchToProject(e,t={}){if(!e)return void console.error("switchProject => Please provide project folder");let o,i;this._sbEnvSwitcher.text="$(root-folder) Loading...",this._pool.getActiveObserver()&&(o=this._pool.getActiveObserver().projectDir,i=this._pool.getActiveObserver().getActiveEnvName());const s=this._pool.getObserver(e);"envName"in t?await s.switchProjectEnv(t.envName):s.getActiveEnvName()||await s.switchProjectEnv(this.loadProjectStateItem(e,"activeEnv")),o&&o===e&&i===s.getActiveEnvName()||(this._pool.switch(e),this._taskManager&&(this._taskManager.dispose(),this._taskManager=void 0),this._taskManager=new I(e,s),0===r().window.visibleTextEditors.length&&M.getSetting("autoOpenPlatformIOIniFile")&&r().window.showTextDocument(r().Uri.file(y().join(e,"platformio.ini")))),this.updateEnvSwitcher(),this.saveActiveProjectState()}registerEnvSwitcher(){this._sbEnvSwitcher=r().window.createStatusBarItem("pio-env-switcher",r().StatusBarAlignment.Left,10),this._sbEnvSwitcher.name="PlatformIO: Project Environment Switcher",this._sbEnvSwitcher.tooltip="Switch PlatformIO Project Environment",this._sbEnvSwitcher.command="platformio-ide.switchProjectEnv",this._sbEnvSwitcher.text="$(root-folder) Loading...",this._sbEnvSwitcher.show(),this.subscriptions.push(this._sbEnvSwitcher,r().commands.registerCommand("platformio-ide.switchProjectEnv",(()=>this.pickProjectEnv())))}updateEnvSwitcher(){const e=this._pool.getActiveObserver();if(!e)return;const t=e.getActiveEnvName()?`env:${e.getActiveEnvName()}`:"Default";this._sbEnvSwitcher.text=`$(root-folder) ${t} (${y().basename(e.projectDir)})`}async pickProjectEnv(){const e=[];for(const t of D.getPIOProjectDirs()){const o=this._pool.getObserver(t),i=await o.getProjectEnvs();if(!i||!i.length)continue;const s=`${y().basename(y().dirname(t))}/${y().basename(t)}`;e.push({projectDir:t,label:"Default",description:`$(folder) ${s} ("default_envs" from "platformio.ini")`}),e.push(...i.map((e=>({projectDir:t,envName:e.name,label:`env:${e.name}`,description:`$(folder) ${s}`}))))}const t=await r().window.showQuickPick(e,{matchOnDescription:!0});t&&this.switchToProject(t.projectDir,{envName:t.envName})}}const x=require("crypto");var j=e.n(x);class A{constructor(){this.subscriptions=[],this._currentPanel=void 0,this._lastStartUrl=A.defaultStartUrl,this.subscriptions.push(r().workspace.onDidChangeWorkspaceFolders(this.disposePanel.bind(this)))}async toggle(e=A.defaultStartUrl){const t=r().window.activeTextEditor?r().window.activeTextEditor.viewColumn:void 0;try{if(this._currentPanel)return this._lastStartUrl!==e&&(this._currentPanel.webview.html=await this.getWebviewContent(e)),this._currentPanel.reveal(t)}catch(e){console.warn(e)}this._currentPanel=await this.newPanel(e)}async newPanel(e){const t=r().window.createWebviewPanel("pioHome",M.getEnterpriseSetting("pioHomeTitle","PIO Home"),r().ViewColumn.One,{enableScripts:!0,retainContextWhenHidden:!0});this.subscriptions.push(t.onDidDispose(this.onPanelDisposed.bind(this))),t.iconPath=r().Uri.file(y().join(M.context.extensionPath,"resources","platformio-mini-logo.svg")),t.webview.html=this.getLoadingContent();try{t.webview.html=await this.getWebviewContent(e)}catch(e){e.toString().includes("Webview is disposed")||m("Start PIO Home Server",e)}return t}getTheme(){return((r().workspace.getConfiguration("workbench")||{}).colorTheme||"").toLowerCase().includes("light")?"light":"dark"}getLoadingContent(){return`<!DOCTYPE html>\n    <html lang="en">\n    <body style="background-color: ${"light"===this.getTheme()?"#FFF":"#1E1E1E"}">\n      <div style="padding: 15px;">Loading...</div>\n    </body>\n    </html>`}async getWebviewContent(e){this._lastStartUrl=e,await a.home.ensureServerStarted({port:M.getSetting("pioHomeServerHttpPort"),host:M.getSetting("pioHomeServerHttpHost"),onIDECommand:await this.onIDECommand.bind(this)});const t=this.getTheme(),o="pioHomeIFrame-"+j().createHash("sha1").update(j().randomBytes(512)).digest("hex");return`<!DOCTYPE html>\n      <html lang="en">\n      <head>${i?`\n<script>\n  for (const command of ['selectAll', 'copy', 'paste', 'cut', 'undo', 'redo']) {\n    document.addEventListener(command, (e) => {\n      document.getElementById('${o}').contentWindow.postMessage({'command': 'execCommand', 'data': command}, '*');\n    });\n  }\n  window.addEventListener('message', (e) => {\n    if (e.data.command === 'kbd-event') {\n      window.dispatchEvent(new KeyboardEvent('keydown', e.data.data));\n    }\n  });\n<\/script>\n  `:""}</head>\n      <body style="margin: 0; padding: 0; height: 100%; overflow: hidden; background-color: ${"light"===t?"#FFF":"#1E1E1E"}">\n        <iframe id="${o}" src="${a.home.getFrontendUrl({start:e,theme:t,workspace:M.getEnterpriseSetting("defaultPIOHomeWorkspace")})}"\n          width="100%"\n          height="100%"\n          frameborder="0"\n          style="border: 0; left: 0; right: 0; bottom: 0; top: 0; position:absolute;" />\n      </body>\n      </html>\n    `}async onIDECommand(e,t){switch(e){case"open_project":return this.onOpenProjectCommand(t);case"open_text_document":return await this.onOpenTextDocumentCommand(t);case"get_pio_project_dirs":return this.onGetPIOProjectDirs()}}onOpenProjectCommand(e){return M.projectObservable&&(M.projectObservable.saveProjectStateItem(r().Uri.file(e).fsPath,"activeEnv",void 0),M.projectObservable.switchToProject(r().Uri.file(e).fsPath)),this.disposePanel(),r().workspace.workspaceFolders?r().workspace.updateWorkspaceFolders(r().workspace.workspaceFolders.length,null,{uri:r().Uri.file(e)}):r().commands.executeCommand("vscode.openFolder",r().Uri.file(e)),r().commands.executeCommand("workbench.view.explorer"),!0}async onOpenTextDocumentCommand(e){const t=await r().window.showTextDocument(r().Uri.file(e.path)),o=new(r().Position)((e.line||1)-1,(e.column||1)-1);return t.selection=new(r().Selection)(o,o),t.revealRange(new(r().Range)(o,o),r().TextEditorRevealType.InCenter),!0}onGetPIOProjectDirs(){return D.getPIOProjectDirs()}onPanelDisposed(){this._currentPanel=void 0}disposePanel(){this._currentPanel&&(this._currentPanel.dispose(),this._currentPanel=void 0)}dispose(){this.disposePanel(),a.misc.disposeSubscriptions(this.subscriptions),a.home.shutdownServer()}}!function(e,t,o){t in e?Object.defineProperty(e,t,{value:"/",enumerable:!0,configurable:!0,writable:!0}):e[t]="/"}(A,"defaultStartUrl");class R{constructor(){this._instance=void 0}new(){const e=Object.create(process.env);return process.env.PLATFORMIO_PATH&&(e.PATH=process.env.PLATFORMIO_PATH,e.Path=process.env.PLATFORMIO_PATH),r().window.createTerminal({name:"PlatformIO CLI",env:e})}sendText(e){this._instance&&void 0===this._instance.exitStatus||(this._instance=this.new()),this._instance.sendText(e),this._instance.show()}dispose(){this._instance&&this._instance.dispose(),this._instance=void 0}}class U extends n.TreeItem{constructor(e,t,o,i,s){super(e,i),t&&(this.command={title:e,command:t,arguments:o}),this.customChildren=s}}class L{getChildren(e){return e&&e.customChildren?e.customChildren:[new U("PIO Home",void 0,void 0,n.TreeItemCollapsibleState.Expanded,[new U("Open","platformio-ide.showHome"),new U("PIO Account","platformio-ide.showHome",["/account"]),new U("Inspect","platformio-ide.showHome",["/inspect"]),new U("Projects & Configuration","platformio-ide.showHome",["/projects"]),new U("Libraries","platformio-ide.showHome",["/libraries"]),new U("Boards","platformio-ide.showHome",["/boards"]),new U("Platforms","platformio-ide.showHome",["/platforms"]),new U("Devices","platformio-ide.showHome",["/device"])]),new U("Debug",void 0,void 0,n.TreeItemCollapsibleState.Expanded,[new U("Start Debugging","platformio-ide.startDebugging"),new U("Toggle Debug Console","workbench.debug.action.toggleRepl")]),new U("Updates",void 0,void 0,n.TreeItemCollapsibleState.Expanded,[new U("Library Updates","platformio-ide.showHome",["/libraries/updates"]),new U("Platform Updates","platformio-ide.showHome",["/platforms/updates"]),new U("Update All","platformio-ide.updateCore")]),new U("Miscellaneous",void 0,void 0,n.TreeItemCollapsibleState.Expanded,[new U("PlatformIO Core CLI","platformio-ide.openPIOCoreCLI"),new U("Clone Git Project","git.clone"),new U("New Terminal","platformio-ide.newTerminal"),new U("Upgrade PlatformIO Core","platformio-ide.upgradeCore")])]}getTreeItem(e){return e}}const M=new class{constructor(){this.context=void 0,this.pioTerm=void 0,this.pioHome=void 0,this.projectObservable=void 0,this.subscriptions=[],this._enterpriseSettings=void 0}async activate(e){this.context=e,this.stateStorage=new b(e.globalState),this.pioHome=new A,this.pioTerm=new R,this.subscriptions.push(this.pioHome,this.pioTerm);const t=D.getPIOProjectDirs().length>0;!t&&this.getSetting("activateOnlyOnPlatformIOProject")||(r().workspace.getConfiguration("extensions").has("showRecommendationsOnlyOnDemand")||r().workspace.getConfiguration("extensions").update("showRecommendationsOnlyOnDemand",!0),this.patchOSEnviron(),await this.startInstaller(!t),this.subscriptions.push(this.handleUseDevelopmentPIOCoreConfiguration()),r().commands.executeCommand("setContext","pioCoreReady",!0),"function"==typeof this.getEnterpriseSetting("onPIOCoreReady")&&await this.getEnterpriseSetting("onPIOCoreReady")(),this.subscriptions.push(r().window.registerTreeDataProvider("platformio-activitybar.quickAccess",new L)),this.registerGlobalCommands(),t?(r().commands.executeCommand("setContext","pioProjectReady",!0),this.initDebug(),this.initToolbar({ignoreCommands:this.getEnterpriseSetting("ignoreToolbarCommands")}),this.projectObservable=new D,this.subscriptions.push(this.projectObservable),this.startPIOHome(),async function(e){const t="rate-extension";let o=e.getValue(t);if(o&&o.done)return;if(o&&o.callCounter||(o={callCounter:0,done:!1}),o.callCounter+=1,o.callCounter<13)return void e.setValue(t,o);const i=await r().window.showInformationMessage("If you enjoy using PlatformIO IDE for VSCode, would you mind taking a moment to rate it? It will not take more than one minute. Thanks for your support!",{title:"Rate PlatformIO IDE Extension",isCloseAffordance:!1},{title:"Remind later",isCloseAffordance:!1},{title:"No, Thanks",isCloseAffordance:!0});switch(i?i.title:void 0){case"Rate PlatformIO IDE Extension":r().commands.executeCommand("vscode.open",r().Uri.parse("http://bit.ly/pio-vscode-rate")),o.done=!0;break;case"No, Thanks":o.done=!0;break;default:o.callCounter=0}e.setValue(t,o)}(this.stateStorage),async function(){const e=r().extensions.all.filter((e=>e.isActive&&s.includes(e.id)));if(0===e.length)return;const t=await r().window.showWarningMessage(`Conflicted extensions with IntelliSense service were detected (${e.map((e=>e.packageJSON.displayName||e.id)).join(", ")}). Code-completion, linting and navigation will not work properly. Please disable or uninstall them (Menu > View > Extensions).`,{title:"More details",isCloseAffordance:!1},{title:"Uninstall conflicted",isCloseAffordance:!1},{title:"Remind later",isCloseAffordance:!0});switch(t?t.title:void 0){case"More details":r().commands.executeCommand("vscode.open",r().Uri.parse("http://bit.ly/pio-vscode-conflicted-extensions"));break;case"Uninstall conflicted":e.forEach((e=>{r().commands.executeCommand("workbench.extensions.uninstallExtension",e.id)})),r().commands.executeCommand("workbench.action.reloadWindow")}}(),this.subscriptions.push(r().window.onDidChangeActiveTextEditor((e=>async function(e,t){if(!e||!e.document||!e.document.fileName)return;if(!e.document.fileName.endsWith(".ino"))return;const o="ino-warn-disabled";if(t.getValue(o))return;const i=await r().window.showWarningMessage("C/C++ IntelliSense service does not support .INO files. It might lead to the spurious problems with code completion, linting, and debugging. Please convert .INO sketch into the valid .CPP file.",{title:"Show instruction",isCloseAffordance:!1},{title:"Do not show again",isCloseAffordance:!1},{title:"Remind later",isCloseAffordance:!0});switch(i?i.title:void 0){case"Show instruction":r().commands.executeCommand("vscode.open",r().Uri.parse("http://bit.ly/ino2cpp"));break;case"Do not show again":t.setValue(o,1)}}(e,this.stateStorage))))):this.initToolbar({filterCommands:["platformio-ide.showHome"]}))}getSetting(e){return r().workspace.getConfiguration("platformio-ide").get(e)}loadEnterpriseSettings(){const e=r().extensions.all.find((e=>e.id.startsWith("platformio.")&&"platformio.platformio-ide"!==e.id&&e.isActive));return e&&e.exports?e.exports.settings:void 0}getEnterpriseSetting(e,t){return this._enterpriseSettings||(this._enterpriseSettings=this.loadEnterpriseSettings()),this._enterpriseSettings&&e in this._enterpriseSettings?this._enterpriseSettings[e]:t}patchOSEnviron(){const e={PLATFORMIO_IDE:h()},t=r().workspace.getConfiguration("http").get("proxy");!t||process.env.HTTP_PROXY||process.env.http_proxy||(e.HTTP_PROXY=t),r().workspace.getConfiguration("http").get("proxyStrictSSL")||(e.CURL_CA_BUNDLE=""),!t||process.env.HTTPS_PROXY||process.env.https_proxy||(e.HTTPS_PROXY=t),this.getSetting("customPyPiIndexUrl")&&(e.PIP_INDEX_URL=this.getSetting("customPyPiIndexUrl")),a.proc.patchOSEnviron({caller:"vscode",extraPath:this.getSetting("customPATH"),extraVars:e})}async startInstaller(e){const t=new S(this.context.globalState,e);if(!t.locked())return await r().window.withProgress({location:r().ProgressLocation.Window,title:"PlatformIO"},(async e=>{e.report({message:"Checking PlatformIO Core installation..."});try{return!await t.check()}catch(e){}return!0}))?await r().window.withProgress({location:r().ProgressLocation.Notification,title:"PlatformIO Installer"},(async e=>{e.report({message:"Installing PlatformIO IDE..."});const o=r().window.createOutputChannel("PlatformIO Installation");o.show(),o.appendLine("Installing PlatformIO IDE..."),o.appendLine("It may take a few minutes depending on your connection speed"),o.appendLine("Please do not close this window and do not open other folders until this process is completed."),o.appendLine("\nDebugging information is available via VSCode > Help > Toggle Developer Tools > Console.");try{t.lock(),await t.install(e),o.appendLine("PlatformIO IDE installed successfully.\n"),o.appendLine("Please restart VSCode.");const i="Reload Now";await r().window.showInformationMessage("PlatformIO IDE has been successfully installed! Please reload window",i)===i&&r().commands.executeCommand("workbench.action.reloadWindow")}catch(e){o.appendLine("Failed to install PlatformIO IDE."),m("Installation Manager",e)}finally{t.unlock()}return t.destroy(),!0})):void 0;r().window.showInformationMessage("PlatformIO IDE installation has been suspended, because PlatformIO IDE Installer is already started in another window.")}async startPIOHome(){!this.getSetting("disablePIOHomeStartup")&&a.home.showAtStartup("vscode")&&r().commands.executeCommand("platformio-ide.showHome")}registerGlobalCommands(){this.subscriptions.push(r().commands.registerCommand("platformio-ide.showHome",(e=>this.pioHome.toggle(e))),r().commands.registerCommand("platformio-ide.newTerminal",(()=>this.pioTerm.new().show())),r().commands.registerCommand("platformio-ide.openPIOCoreCLI",(()=>this.pioTerm.sendText("pio --help"))),r().commands.registerCommand("platformio-ide.startDebugging",(()=>{r().commands.executeCommand("workbench.view.debug"),r().commands.executeCommand("workbench.debug.action.toggleRepl"),r().commands.executeCommand("workbench.action.debug.start")})),r().commands.registerCommand("platformio-ide.updateGlobalLibs",(()=>this.pioTerm.sendText("pio lib --global update"))),r().commands.registerCommand("platformio-ide.updatePlatforms",(()=>this.pioTerm.sendText("pio platform update"))),r().commands.registerCommand("platformio-ide.updateCore",(()=>this.pioTerm.sendText("pio update"))),r().commands.registerCommand("platformio-ide.upgradeCore",(()=>this.pioTerm.sendText("pio upgrade"))))}initDebug(){c.activate(this.context)}initToolbar({filterCommands:e,ignoreCommands:t}){this.getSetting("disableToolbar")||[["$(home)","PlatformIO: Home","platformio-ide.showHome"],["$(check)","PlatformIO: Build","platformio-ide.build"],["$(arrow-right)","PlatformIO: Upload","platformio-ide.upload"],["$(trashcan)","PlatformIO: Clean","platformio-ide.clean"],["$(plug)","PlatformIO: Serial Monitor","platformio-ide.serialMonitor"],["$(terminal)","PlatformIO: New Terminal","platformio-ide.newTerminal"]].filter((o=>(!e||e.includes(o[2]))&&(!t||!t.includes(o[2])))).reverse().forEach(((e,t)=>{const[o,i,s]=e,n=r().window.createStatusBarItem("pio-toolbar",r().StatusBarAlignment.Left,10+t+1);n.name="PlatformIO: Toolbar",n.text=o,n.tooltip=i,n.command=s,n.show(),this.subscriptions.push(n)}))}handleUseDevelopmentPIOCoreConfiguration(){return r().workspace.onDidChangeConfiguration((e=>{if(!e.affectsConfiguration("platformio-ide.useDevelopmentPIOCore")||!this.getSetting("useBuiltinPIOCore"))return;const t=a.core.getEnvDir();t&&w().isDirectorySync(t)&&(a.home.shutdownServer(),setTimeout((()=>{try{w().removeSync(t)}catch(e){console.warn(e)}r().window.showInformationMessage("Please restart VSCode to apply the changes.")}),2e3))}))}disposeLocalSubscriptions(){r().commands.executeCommand("setContext","pioCoreReady",!1),a.misc.disposeSubscriptions(this.subscriptions)}deactivate(){this.disposeLocalSubscriptions()}};function H(e){return M.activate(e),M}function F(){M.deactivate(),c.deactivate()}module.exports=t})();
//# sourceMappingURL=extension.js.map