{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://platformio-ide/webpack/bootstrap","webpack://platformio-ide/webpack/runtime/compat get default export","webpack://platformio-ide/webpack/runtime/define property getters","webpack://platformio-ide/webpack/runtime/hasOwnProperty shorthand","webpack://platformio-ide/webpack/runtime/make namespace object","webpack://platformio-ide/./src/constants.js","webpack://platformio-ide/external commonjs2 \"vscode\"","webpack://platformio-ide/external commonjs2 \"platformio-node-helpers\"","webpack://platformio-ide/external commonjs2 \"platformio-vscode-debug\"","webpack://platformio-ide/external node-commonjs \"os\"","webpack://platformio-ide/./src/utils.js","webpack://platformio-ide/external commonjs2 \"fs-plus\"","webpack://platformio-ide/./src/installer/python-prompt.js","webpack://platformio-ide/./src/state-storage.js","webpack://platformio-ide/./src/installer/manager.js","webpack://platformio-ide/./src/project/task-tree.js","webpack://platformio-ide/./src/project/tasks.js","webpack://platformio-ide/external node-commonjs \"fs\"","webpack://platformio-ide/external node-commonjs \"path\"","webpack://platformio-ide/./src/project/observable.js","webpack://platformio-ide/external node-commonjs \"crypto\"","webpack://platformio-ide/./src/home.js","webpack://platformio-ide/./src/terminal.js","webpack://platformio-ide/./src/views/quick-access-tree.js","webpack://platformio-ide/./src/main.js","webpack://platformio-ide/./src/misc.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nexport const IS_WINDOWS = process.platform.startsWith('win');\nexport const IS_OSX = process.platform == 'darwin';\nexport const IS_LINUX = !IS_WINDOWS && !IS_OSX;\nexport const PIO_CORE_VERSION_SPEC = '>=5.1';\nexport const STATUS_BAR_PRIORITY_START = 10;\nexport const CONFLICTED_EXTENSION_IDS = [\n  'llvm-vs-code-extensions.vscode-clangd',\n  'vsciot-vscode.vscode-arduino',\n  'vscode-openapi',\n];\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"vscode\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"platformio-node-helpers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"platformio-vscode-debug\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"os\");","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\n\nimport os from 'os';\nimport vscode from 'vscode';\n\nexport async function notifyError(title, err) {\n  const description = err.stack || err.toString();\n  const ghbody = `# Description of problem\n  Leave a comment...\n\n  BEFORE SUBMITTING, PLEASE SEARCH FOR DUPLICATES IN\n  - https://github.com/platformio/platformio-vscode-ide/issues?q=is%3Aissue+\n\n  # Configuration\n\n  VSCode: ${vscode.version}\n  PIO IDE: v${getIDEVersion()}\n  System: ${os.type()}, ${os.release()}, ${os.arch()}\n\n  # Exception\n  \\`\\`\\`\n  ${description}\n  \\`\\`\\`\n  `;\n  const reportUrl = pioNodeHelpers.misc.getErrorReportUrl(title, ghbody);\n\n  let action = 'Report a problem';\n  if (!reportUrl.includes('issues/new')) {\n    action = 'Check available solutions';\n  }\n\n  const selected = await vscode.window.showErrorMessage(\n    description.substring(0, 700) + '...',\n    action\n  );\n  if (selected === action) {\n    vscode.commands.executeCommand('vscode.open', vscode.Uri.parse(reportUrl));\n  }\n  console.error(err);\n}\n\nexport function getIDEManifest() {\n  return vscode.extensions.getExtension('platformio.platformio-ide').packageJSON;\n}\n\nexport function getIDEVersion() {\n  return getIDEManifest().version;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs-plus\");","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport fs from 'fs-plus';\nimport vscode from 'vscode';\n\nexport default class PythonPrompt {\n  STATUS_TRY_AGAIN = 0;\n  STATUS_ABORT = 1;\n  STATUS_CUSTOMEXE = 2;\n\n  async prompt() {\n    const selectedItem = await vscode.window.showInformationMessage(\n      'PlatformIO: Can not find working Python 3.6+ Interpreter. Please install the latest Python 3 and restart VSCode',\n      { title: 'Install Python', isCloseAffordance: false },\n      { title: 'I have Python', isCloseAffordance: false },\n      { title: 'Try again', isCloseAffordance: false },\n      { title: 'Abort PlatformIO IDE Installation', isCloseAffordance: true }\n    );\n\n    let result = { status: this.STATUS_TRY_AGAIN };\n    let pythonExecutable = undefined;\n    switch (selectedItem ? selectedItem.title : undefined) {\n      case 'Install Python':\n        vscode.commands.executeCommand(\n          'vscode.open',\n          vscode.Uri.parse(\n            'http://docs.platformio.org/page/faq.html#install-python-interpreter'\n          )\n        );\n        break;\n      case 'I have Python':\n        pythonExecutable = await vscode.window.showInputBox({\n          prompt: 'Please specify a full path to Python executable file',\n          placeHolder: 'Full path to python/python.exe',\n          validateInput: (value) =>\n            !fs.isFileSync(value) ? 'Invalid path to Python Interpreter' : null,\n        });\n        if (pythonExecutable) {\n          result = {\n            status: this.STATUS_CUSTOMEXE,\n            pythonExecutable,\n          };\n        }\n        break;\n      case 'Abort PlatformIO IDE Installation':\n        result = { status: this.STATUS_ABORT };\n        break;\n    }\n\n    return result;\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nexport default class StateStorage {\n  constructor(globalState, stateKey = 'miscStates') {\n    this._globalState = globalState;\n    this._stateKey = stateKey;\n  }\n\n  getState() {\n    try {\n      const value = this._globalState.get(this._stateKey);\n      return value || {};\n    } catch (err) {\n      return {};\n    }\n  }\n\n  getValue(key) {\n    return (this.getState() || {})[key];\n  }\n\n  setValue(key, value) {\n    const data = this.getState();\n    data[key] = value;\n    this._globalState.update(this._stateKey, data);\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\n\nimport { PIO_CORE_VERSION_SPEC } from '../constants';\nimport PythonPrompt from './python-prompt';\nimport StateStorage from '../state-storage';\nimport vscode from 'vscode';\n\nexport default class InstallationManager {\n  LOCK_TIMEOUT = 1 * 60 * 1000; // 1 minute\n  LOCK_KEY = 'platformio-ide:installer-lock';\n  STORAGE_STATE_KEY = 'platformio-ide:installer-state';\n\n  constructor(globalState, disableAutoUpdates = false) {\n    this.globalState = globalState;\n    this.stateStorage = new StateStorage(globalState, this.STORAGE_STATE_KEY);\n\n    const config = vscode.workspace.getConfiguration('platformio-ide');\n    this.stages = [\n      new pioNodeHelpers.installer.PlatformIOCoreStage(\n        this.stateStorage,\n        this.onDidStatusChange.bind(this),\n        {\n          pioCoreVersionSpec: PIO_CORE_VERSION_SPEC,\n          useBuiltinPython: config.get('useBuiltinPython'),\n          useBuiltinPIOCore: config.get('useBuiltinPIOCore'),\n          useDevelopmentPIOCore: config.get('useDevelopmentPIOCore'),\n          pythonPrompt: new PythonPrompt(),\n          disableAutoUpdates: disableAutoUpdates,\n        }\n      ),\n    ];\n  }\n\n  onDidStatusChange() {\n    // increase lock timeout on each stage update\n    if (this.locked()) {\n      this.lock();\n    }\n  }\n\n  lock() {\n    return this.globalState.update(this.LOCK_KEY, new Date().getTime());\n  }\n\n  unlock() {\n    return this.globalState.update(this.LOCK_KEY, undefined);\n  }\n\n  locked() {\n    const lockTime = this.globalState.get(this.LOCK_KEY);\n    if (!lockTime) {\n      return false;\n    }\n    return new Date().getTime() - parseInt(lockTime) <= this.LOCK_TIMEOUT;\n  }\n\n  async check() {\n    let result = true;\n    for (const stage of this.stages) {\n      try {\n        if (!(await stage.check())) {\n          result = false;\n        }\n      } catch (err) {\n        result = false;\n        console.warn(err);\n      }\n    }\n    return result;\n  }\n\n  async install(progress) {\n    const stageIncrementTotal = 100 / this.stages.length;\n    for (const stage of this.stages) {\n      await stage.install((message, increment) => {\n        progress.report({\n          message,\n          increment: stageIncrementTotal * (increment / 100),\n        });\n      });\n    }\n    progress.report({ message: 'Finished! Please restart VSCode.', increment: 100 });\n  }\n\n  destroy() {\n    return this.stages.map((stage) => stage.destroy());\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as vscode from 'vscode';\n\nexport default class ProjectTasksTreeProvider {\n  static DEFAULT_ENV_NAME = 'Default';\n\n  constructor(id, envs, tasks, activeEnvName) {\n    this.id = id;\n    this.envs = envs;\n    this.tasks = tasks;\n    this.activeEnvName = activeEnvName;\n    this.multiEnvProject = this.envs.length > 1;\n  }\n\n  getTreeItem(item) {\n    return item instanceof vscode.TreeItem ? item : this.taskToTreeItem(item);\n  }\n\n  taskToTreeItem(task) {\n    const treeItem = new vscode.TreeItem(task.name);\n    treeItem.iconPath = new vscode.ThemeIcon('circle-outline');\n    treeItem.tooltip = task.title;\n    treeItem.command = {\n      title: task.title,\n      command: 'platformio-ide.privateRunTask',\n      arguments: [task],\n    };\n    if (!task.coreEnv && task.multienv && this.multiEnvProject) {\n      treeItem.label += ' All';\n    }\n    return treeItem;\n  }\n\n  getChildren(element) {\n    if (element && element.group) {\n      return this.getEnvGroupChildren(element.env, element.group);\n    } else if (element) {\n      return this.getEnvChildren(element.env);\n    }\n    return this.getRootChildren();\n  }\n\n  getRootChildren() {\n    const result = [];\n    for (const envName of [undefined, ...this.envs.map((item) => item.name)]) {\n      const treeItem = new vscode.TreeItem(\n        envName || ProjectTasksTreeProvider.DEFAULT_ENV_NAME,\n        envName && (envName === this.activeEnvName || !this.multiEnvProject)\n          ? vscode.TreeItemCollapsibleState.Expanded\n          : vscode.TreeItemCollapsibleState.Collapsed\n      );\n      treeItem.id = `${this.id}-${envName}`;\n      treeItem.env = envName;\n      treeItem.iconPath = new vscode.ThemeIcon('root-folder');\n      result.push(treeItem);\n    }\n    return result;\n  }\n\n  getEnvGroupChildren(env, group) {\n    return this.tasks.filter((task) => task.coreEnv === env && task.group === group);\n  }\n\n  getEnvChildren(env) {\n    const envTasks = this.tasks.filter((task) => task.coreEnv === env);\n    if (!envTasks.length) {\n      return [new vscode.TreeItem('Loading...')];\n    }\n    const result = envTasks.filter((task) => !task.group);\n    // root groups\n    for (const group of this.getTaskGroups(envTasks)) {\n      const element = new vscode.TreeItem(\n        group,\n        ['General', 'Platform'].includes(group)\n          ? vscode.TreeItemCollapsibleState.Expanded\n          : vscode.TreeItemCollapsibleState.Collapsed\n      );\n      element.env = env;\n      element.group = group;\n      element.iconPath = vscode.ThemeIcon.Folder;\n      result.push(element);\n    }\n    return result;\n  }\n\n  getTaskGroups(tasks) {\n    const result = ['General'];\n    const candidates = tasks.filter((task) => task.group).map((task) => task.group);\n    // reorder\n    if (candidates.includes('Platform')) {\n      result.push('Platform');\n    }\n    for (const group of candidates) {\n      if (!result.includes(group)) {\n        result.push(group);\n      }\n    }\n    return result;\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\n\nimport { IS_WINDOWS } from '../constants';\nimport ProjectTasksTreeProvider from './task-tree';\nimport { extension } from '../main';\nimport vscode from 'vscode';\n\nexport default class ProjectTaskManager {\n  static PROVIDER_TYPE = 'PlatformIO';\n  static TASKS_VIEW_ID = 'platformio-ide.projectTasks';\n  static AUTO_REFRESH_DELAY = 500; // 0.5 sec\n\n  constructor(projectDir, projectObserver) {\n    this.projectDir = projectDir;\n    this.projectObserver = projectObserver;\n    this.subscriptions = [];\n\n    this._sid = Math.random();\n    this._refreshTimeout = undefined;\n    this._restoreOnDidEndTask = undefined;\n    this._tasksToRestore = [];\n\n    this.refresh();\n  }\n\n  dispose() {\n    pioNodeHelpers.misc.disposeSubscriptions(this.subscriptions);\n  }\n\n  requestRefresh() {\n    if (this._refreshTimeout) {\n      clearTimeout(this._refreshTimeout);\n    }\n    this._refreshTimeout = setTimeout(\n      this.refresh.bind(this),\n      ProjectTaskManager.AUTO_REFRESH_DELAY\n    );\n  }\n\n  async refresh({ force = false } = {}) {\n    this.dispose();\n\n    if (force) {\n      this.projectObserver.resetCache();\n      this._sid = Math.random();\n    }\n\n    const projectEnvs = await this.projectObserver.getProjectEnvs();\n    const projectTasks = [...(await this.projectObserver.getDefaultTasks())];\n    for (const item of projectEnvs) {\n      projectTasks.push(\n        ...((await this.projectObserver.getLoadedEnvTasks(item.name)) || [])\n      );\n    }\n\n    const taskViewer = vscode.window.createTreeView(ProjectTaskManager.TASKS_VIEW_ID, {\n      treeDataProvider: new ProjectTasksTreeProvider(\n        this._sid,\n        projectEnvs,\n        projectTasks,\n        this.projectObserver.getActiveEnvName()\n      ),\n      showCollapseAll: true,\n    });\n\n    this.subscriptions.push(\n      taskViewer,\n\n      // pre-fetch expanded env tasks\n      taskViewer.onDidExpandElement(async ({ element }) => {\n        if (element.env) {\n          await this.onDidRequestEnvTasks(element.env);\n        }\n      }),\n\n      // register VSCode Task Provider\n      vscode.tasks.registerTaskProvider(ProjectTaskManager.PROVIDER_TYPE, {\n        provideTasks: async () => projectTasks.map((task) => this.toVSCodeTask(task)),\n        resolveTask: () => {\n          return undefined;\n        },\n      }),\n\n      vscode.tasks.onDidEndTaskProcess((event) => this.onDidEndTaskProcess(event))\n    );\n\n    this.registerTaskBasedCommands(projectTasks);\n    vscode.commands.executeCommand(\n      'setContext',\n      'pioMultiEnvProject',\n      projectEnvs.length > 1\n    );\n  }\n\n  async onDidRequestEnvTasks(name) {\n    if (await this.projectObserver.getLoadedEnvTasks(name)) {\n      return;\n    }\n    await this.projectObserver.loadEnvTasks(name);\n    return this.requestRefresh();\n  }\n\n  toVSCodeTask(projectTask) {\n    const envClone = Object.create(process.env);\n    if (process.env.PLATFORMIO_PATH) {\n      envClone.PATH = process.env.PLATFORMIO_PATH;\n      envClone.Path = process.env.PLATFORMIO_PATH;\n    }\n    const vscodeTask = new vscode.Task(\n      {\n        type: ProjectTaskManager.PROVIDER_TYPE,\n        task: projectTask.id,\n      },\n      vscode.workspace.getWorkspaceFolder(vscode.Uri.file(this.projectDir)),\n      projectTask.title,\n      ProjectTaskManager.PROVIDER_TYPE,\n      new vscode.ProcessExecution(\n        IS_WINDOWS ? 'platformio.exe' : 'platformio',\n        projectTask.args,\n        {\n          cwd: this.projectDir,\n          env: envClone,\n        }\n      ),\n      '$platformio'\n    );\n    vscodeTask.presentationOptions = {\n      panel: vscode.TaskPanelKind.Dedicated,\n    };\n    if (projectTask.isBuild()) {\n      vscodeTask.group = vscode.TaskGroup.Build;\n    } else if (projectTask.isClean()) {\n      vscodeTask.group = vscode.TaskGroup.Clean;\n    } else if (projectTask.isTest()) {\n      vscodeTask.group = vscode.TaskGroup.Test;\n    }\n    return vscodeTask;\n  }\n\n  runTask(task) {\n    this._restoreOnDidEndTask = undefined;\n    this._tasksToRestore = [];\n    this._autoCloseSerialMonitor(task);\n    // skip MonitorAndUpload task thatwill be added to this._tasksToRestore\n    if (\n      this._tasksToRestore.some((t) => this.isMonitorAndUploadTask(t)) &&\n      this.isMonitorAndUploadTask(task)\n    ) {\n      return;\n    }\n    vscode.commands.executeCommand('workbench.action.tasks.runTask', {\n      type: ProjectTaskManager.PROVIDER_TYPE,\n      task: task.id,\n    });\n  }\n\n  _autoCloseSerialMonitor(task) {\n    const closeMonitorConds = [\n      extension.getSetting('autoCloseSerialMonitor'),\n      ['upload', 'test'].some((arg) => task.args.includes(arg)),\n    ];\n    if (!closeMonitorConds.every((value) => value)) {\n      return;\n    }\n    this._restoreOnDidEndTask = task;\n    vscode.tasks.taskExecutions.forEach((event) => {\n      const isMonitorAndUploadTask = this.isMonitorAndUploadTask(event.task);\n      const skipConds = [\n        // skip non-PlatformIO task\n        event.task.definition.type !== ProjectTaskManager.PROVIDER_TYPE,\n        !event.task.execution.args.includes('monitor'),\n        this.areTasksEqual(task, event.task) && !isMonitorAndUploadTask,\n      ];\n      if (skipConds.some((value) => value)) {\n        return;\n      }\n      if (\n        isMonitorAndUploadTask ||\n        ['device', 'monitor'].every((arg) => event.task.execution.args.includes(arg))\n      ) {\n        this._tasksToRestore.push(event.task);\n      }\n      event.terminate();\n    });\n  }\n\n  onDidEndTaskProcess(event) {\n    const skipConds = [\n      !this._restoreOnDidEndTask,\n      event.execution.task.definition.type !== ProjectTaskManager.PROVIDER_TYPE,\n      event.exitCode !== 0 && !this.isMonitorAndUploadTask(event.execution.task),\n      this.areTasksEqual(this._restoreOnDidEndTask, event.execution.task),\n    ];\n    if (skipConds.some((value) => value)) {\n      return;\n    }\n    this._restoreOnDidEndTask = undefined;\n    setTimeout(() => {\n      while (this._tasksToRestore.length) {\n        vscode.tasks.executeTask(this._tasksToRestore.pop());\n      }\n    }, parseInt(extension.getSetting('reopenSerialMonitorDelay')));\n  }\n\n  isMonitorAndUploadTask(task) {\n    const args = task.args || task.execution.args;\n    return ['--target', 'upload', 'monitor'].every((arg) => args.includes(arg));\n  }\n\n  areTasksEqual(task1, task2) {\n    if (!task1 || !task2) {\n      return task1 === task2;\n    }\n    const args1 = task1.args || task1.execution.args;\n    const args2 = task2.args || task2.execution.args;\n    return args1 === args2;\n  }\n\n  registerTaskBasedCommands(tasks) {\n    const _runTask = (name) => {\n      const candidates = tasks.filter(\n        (task) =>\n          task.name === name && task.coreEnv === this.projectObserver.getActiveEnvName()\n      );\n      this.runTask(candidates[0]);\n    };\n\n    this.subscriptions.push(\n      vscode.commands.registerCommand('platformio-ide.build', () => {\n        if (extension.getSetting('buildTask')) {\n          return vscode.commands.executeCommand(\n            'workbench.action.tasks.runTask',\n            extension.getSetting('buildTask')\n          );\n        }\n        _runTask('Build');\n      }),\n      vscode.commands.registerCommand('platformio-ide.upload', () =>\n        _runTask(\n          extension.getSetting('forceUploadAndMonitor')\n            ? 'Upload and Monitor'\n            : 'Upload'\n        )\n      ),\n      vscode.commands.registerCommand('platformio-ide.test', () => _runTask('Test')),\n      vscode.commands.registerCommand('platformio-ide.clean', () => _runTask('Clean')),\n      vscode.commands.registerCommand('platformio-ide.serialMonitor', () =>\n        _runTask('Monitor')\n      ),\n      vscode.commands.registerCommand('platformio-ide.remoteUpload', () =>\n        _runTask('Remote Upload')\n      )\n    );\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"fs\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"path\");","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\n\nimport ProjectTaskManager from './tasks';\nimport { STATUS_BAR_PRIORITY_START } from '../constants';\nimport StateStorage from '../state-storage';\nimport { extension } from '../main';\nimport fs from 'fs';\nimport { notifyError } from '../utils';\nimport path from 'path';\nimport vscode from 'vscode';\n\nexport default class ProjectObservable {\n  constructor() {\n    this._persistentState = new StateStorage(extension.context.globalState, 'projects');\n    this._taskManager = undefined;\n    this._sbEnvSwitcher = undefined;\n    this._pool = new pioNodeHelpers.project.ProjectPool({\n      ide: 'vscode',\n      api: {\n        createFileSystemWatcher: vscode.workspace.createFileSystemWatcher,\n        createDirSystemWatcher: (dir) =>\n          vscode.workspace.createFileSystemWatcher(path.join(dir, '*')),\n        withIndexRebuildingProgress: (task) =>\n          vscode.window.withProgress(\n            {\n              location: { viewId: vscode.ProgressLocation.Window },\n              title: 'PlatformIO: Rebuilding IntelliSense Index',\n            },\n            task\n          ),\n        withTasksLoadingProgress: (task) =>\n          vscode.window.withProgress(\n            {\n              location: { viewId: ProjectTaskManager.TASKS_VIEW_ID },\n            },\n            async () =>\n              await vscode.window.withProgress(\n                {\n                  location: { viewId: vscode.ProgressLocation.Window },\n                  title: 'PlatformIO: Loading tasks...',\n                },\n                task\n              )\n          ),\n        onDidChangeProjectConfig: (projectDir) => {\n          if (this._taskManager && this._taskManager.projectDir === projectDir) {\n            this._taskManager.requestRefresh();\n          }\n          this.saveActiveProjectState();\n        },\n        onDidNotifyError: notifyError.bind(this),\n      },\n      settings: {\n        autoPreloadEnvTasks: extension.getSetting('autoPreloadEnvTasks'),\n        autoRebuild: extension.getSetting('autoRebuildAutocompleteIndex'),\n      },\n    });\n\n    this.subscriptions = [\n      this._pool,\n      vscode.window.onDidChangeActiveTextEditor(() => {\n        if (!extension.getSetting('activateProjectOnTextEditorChange')) {\n          return;\n        }\n        const projectDir = this.getActiveEditorProjectDir();\n        if (projectDir) {\n          this.switchToProject(projectDir);\n        }\n      }),\n      vscode.workspace.onDidChangeWorkspaceFolders(() =>\n        this.switchToProject(this.findActiveProjectDir())\n      ),\n      vscode.commands.registerCommand('platformio-ide.rebuildProjectIndex', () =>\n        this._pool.getActiveObserver().rebuildIndex({ force: true })\n      ),\n      vscode.commands.registerCommand('platformio-ide.refreshProjectTasks', () =>\n        this._taskManager.refresh({ force: true })\n      ),\n      vscode.commands.registerCommand('platformio-ide.privateRunTask', (task) =>\n        this._taskManager.runTask(task)\n      ),\n    ];\n\n    this.registerEnvSwitcher();\n    // switch to the first project in a workspace on start-up\n    this.switchToProject(this.findActiveProjectDir());\n  }\n\n  dispose() {\n    pioNodeHelpers.misc.disposeSubscriptions(this.subscriptions);\n  }\n\n  static isPIOProjectSync(projectDir) {\n    try {\n      fs.accessSync(path.join(projectDir, 'platformio.ini'));\n      return true;\n    } catch (err) {}\n    return false;\n  }\n\n  static getPIOProjectDirs() {\n    return (vscode.workspace.workspaceFolders || [])\n      .map((folder) => folder.uri.fsPath)\n      .filter((projectDir) => ProjectObservable.isPIOProjectSync(projectDir));\n  }\n\n  findActiveProjectDir() {\n    let projectDir = undefined;\n    if (extension.getSetting('activateProjectOnTextEditorChange')) {\n      projectDir = this.getActiveEditorProjectDir();\n    }\n    return projectDir || this.getSelectedProjectDir();\n  }\n\n  getSelectedProjectDir() {\n    const pioProjectDirs = ProjectObservable.getPIOProjectDirs();\n    const currentActiveDir = this._pool.getActiveProjectDir();\n    if (pioProjectDirs.length < 1) {\n      return undefined;\n    }\n    if (\n      currentActiveDir &&\n      pioProjectDirs.find((projectDir) => projectDir === currentActiveDir)\n    ) {\n      return currentActiveDir;\n    }\n    const lastActiveDir = this._persistentState.getValue('lastProjectDir');\n    if (\n      lastActiveDir &&\n      pioProjectDirs.find((projectDir) => projectDir === lastActiveDir)\n    ) {\n      return lastActiveDir;\n    }\n    return pioProjectDirs[0];\n  }\n\n  getActiveEditorProjectDir() {\n    const pioProjectDirs = ProjectObservable.getPIOProjectDirs();\n    if (pioProjectDirs.length < 1) {\n      return undefined;\n    }\n    const editor = vscode.window.activeTextEditor;\n    if (!editor) {\n      return undefined;\n    }\n    const resource = editor.document.uri;\n    if (resource.scheme !== 'file') {\n      return undefined;\n    }\n    const folder = vscode.workspace.getWorkspaceFolder(resource);\n    if (!folder || !ProjectObservable.isPIOProjectSync(folder.uri.fsPath)) {\n      // outside workspace\n      return undefined;\n    }\n    return folder.uri.fsPath;\n  }\n\n  loadProjectStateItem(projectDir, name) {\n    const data = (this._persistentState.getValue('projects') || {})[projectDir] || {};\n    return data[name];\n  }\n\n  saveProjectStateItem(projectDir, name, value) {\n    const projects = this._persistentState.getValue('projects') || {};\n    if (!projects[projectDir]) {\n      projects[projectDir] = {};\n    }\n    projects[projectDir][name] = value;\n\n    // cleanup removed project\n    for (const key of Object.keys(projects)) {\n      if (ProjectObservable.isPIOProjectSync(key)) {\n        continue;\n      }\n      delete projects[key];\n    }\n\n    this._persistentState.setValue('projects', projects);\n    this._persistentState.setValue('lastProjectDir', projectDir);\n  }\n\n  saveActiveProjectState() {\n    const observer = this._pool.getActiveObserver();\n    if (!observer) {\n      return;\n    }\n    this.saveProjectStateItem(\n      observer.projectDir,\n      'activeEnv',\n      observer.getActiveEnvName()\n    );\n  }\n\n  async switchToProject(projectDir, options = {}) {\n    if (!projectDir) {\n      console.error('switchProject => Please provide project folder');\n      return;\n    }\n    this._sbEnvSwitcher.text = '$(root-folder) Loading...';\n\n    let currentProjectDir = undefined;\n    let currentEnvName = undefined;\n    if (this._pool.getActiveObserver()) {\n      currentProjectDir = this._pool.getActiveObserver().projectDir;\n      currentEnvName = this._pool.getActiveObserver().getActiveEnvName();\n    }\n\n    const observer = this._pool.getObserver(projectDir);\n    if ('envName' in options) {\n      await observer.switchProjectEnv(options.envName);\n    } else if (!observer.getActiveEnvName()) {\n      await observer.switchProjectEnv(\n        this.loadProjectStateItem(projectDir, 'activeEnv')\n      );\n    }\n\n    // ignore active project and & env\n    if (\n      !currentProjectDir ||\n      currentProjectDir !== projectDir ||\n      currentEnvName !== observer.getActiveEnvName()\n    ) {\n      this._pool.switch(projectDir);\n\n      if (this._taskManager) {\n        this._taskManager.dispose();\n        this._taskManager = undefined;\n      }\n      this._taskManager = new ProjectTaskManager(projectDir, observer);\n\n      // open \"platformio.ini\" if no visible editors\n      if (\n        vscode.window.visibleTextEditors.length === 0 &&\n        extension.getSetting('autoOpenPlatformIOIniFile')\n      ) {\n        vscode.window.showTextDocument(\n          vscode.Uri.file(path.join(projectDir, 'platformio.ini'))\n        );\n      }\n    }\n\n    this.updateEnvSwitcher();\n    this.saveActiveProjectState();\n  }\n\n  registerEnvSwitcher() {\n    this._sbEnvSwitcher = vscode.window.createStatusBarItem(\n      'pio-env-switcher',\n      vscode.StatusBarAlignment.Left,\n      STATUS_BAR_PRIORITY_START\n    );\n    this._sbEnvSwitcher.name = 'PlatformIO: Project Environment Switcher';\n    this._sbEnvSwitcher.tooltip = 'Switch PlatformIO Project Environment';\n    this._sbEnvSwitcher.command = 'platformio-ide.switchProjectEnv';\n    this._sbEnvSwitcher.text = '$(root-folder) Loading...';\n    this._sbEnvSwitcher.show();\n\n    this.subscriptions.push(\n      this._sbEnvSwitcher,\n      vscode.commands.registerCommand('platformio-ide.switchProjectEnv', () =>\n        this.pickProjectEnv()\n      )\n    );\n  }\n\n  updateEnvSwitcher() {\n    const observer = this._pool.getActiveObserver();\n    if (!observer) {\n      return;\n    }\n    const envName = observer.getActiveEnvName()\n      ? `env:${observer.getActiveEnvName()}`\n      : 'Default';\n    this._sbEnvSwitcher.text = `$(root-folder) ${envName} (${path.basename(\n      observer.projectDir\n    )})`;\n  }\n\n  async pickProjectEnv() {\n    const items = [];\n    for (const projectDir of ProjectObservable.getPIOProjectDirs()) {\n      const observer = this._pool.getObserver(projectDir);\n      const envs = await observer.getProjectEnvs();\n      if (!envs || !envs.length) {\n        continue;\n      }\n      const shortProjectDir = `${path.basename(\n        path.dirname(projectDir)\n      )}/${path.basename(projectDir)}`;\n      items.push({\n        projectDir,\n        label: 'Default',\n        description: `$(folder) ${shortProjectDir} (\"default_envs\" from \"platformio.ini\")`,\n      });\n      items.push(\n        ...envs.map((item) => ({\n          projectDir,\n          envName: item.name,\n          label: `env:${item.name}`,\n          description: `$(folder) ${shortProjectDir}`,\n        }))\n      );\n    }\n    const pickedItem = await vscode.window.showQuickPick(items, {\n      matchOnDescription: true,\n    });\n    if (!pickedItem) {\n      return;\n    }\n    this.switchToProject(pickedItem.projectDir, { envName: pickedItem.envName });\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"crypto\");","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as pioNodeHelpers from 'platformio-node-helpers';\n\nimport { IS_OSX } from './constants';\nimport ProjectObservable from './project/observable';\nimport crypto from 'crypto';\nimport { extension } from './main';\nimport { notifyError } from './utils';\nimport path from 'path';\nimport vscode from 'vscode';\n\nexport default class PIOHome {\n  static defaultStartUrl = '/';\n\n  constructor() {\n    this.subscriptions = [];\n    this._currentPanel = undefined;\n    this._lastStartUrl = PIOHome.defaultStartUrl;\n\n    // close PIO Home when workspaces folders are changed (VSCode reactivates extensiuon)\n    this.subscriptions.push(\n      vscode.workspace.onDidChangeWorkspaceFolders(this.disposePanel.bind(this))\n    );\n  }\n\n  async toggle(startUrl = PIOHome.defaultStartUrl) {\n    const column = vscode.window.activeTextEditor\n      ? vscode.window.activeTextEditor.viewColumn\n      : undefined;\n    try {\n      if (this._currentPanel) {\n        if (this._lastStartUrl !== startUrl) {\n          this._currentPanel.webview.html = await this.getWebviewContent(startUrl);\n        }\n        return this._currentPanel.reveal(column);\n      }\n    } catch (err) {\n      console.warn(err);\n    }\n    this._currentPanel = await this.newPanel(startUrl);\n  }\n\n  async newPanel(startUrl) {\n    const panel = vscode.window.createWebviewPanel(\n      'pioHome',\n      extension.getEnterpriseSetting('pioHomeTitle', 'PIO Home'),\n      vscode.ViewColumn.One,\n      {\n        enableScripts: true,\n        retainContextWhenHidden: true,\n      }\n    );\n    this.subscriptions.push(panel.onDidDispose(this.onPanelDisposed.bind(this)));\n    panel.iconPath = vscode.Uri.file(\n      path.join(\n        extension.context.extensionPath,\n        'resources',\n        'platformio-mini-logo.svg'\n      )\n    );\n    panel.webview.html = this.getLoadingContent();\n    try {\n      panel.webview.html = await this.getWebviewContent(startUrl);\n    } catch (err) {\n      if (!err.toString().includes('Webview is disposed')) {\n        notifyError('Start PIO Home Server', err);\n      }\n    }\n    return panel;\n  }\n\n  getTheme() {\n    const workbench = vscode.workspace.getConfiguration('workbench') || {};\n    return (workbench.colorTheme || '').toLowerCase().includes('light')\n      ? 'light'\n      : 'dark';\n  }\n\n  getLoadingContent() {\n    const theme = this.getTheme();\n    return `<!DOCTYPE html>\n    <html lang=\"en\">\n    <body style=\"background-color: ${theme === 'light' ? '#FFF' : '#1E1E1E'}\">\n      <div style=\"padding: 15px;\">Loading...</div>\n    </body>\n    </html>`;\n  }\n\n  async getWebviewContent(startUrl) {\n    this._lastStartUrl = startUrl;\n    await pioNodeHelpers.home.ensureServerStarted({\n      port: extension.getSetting('pioHomeServerHttpPort'),\n      host: extension.getSetting('pioHomeServerHttpHost'),\n      onIDECommand: await this.onIDECommand.bind(this),\n    });\n    const theme = this.getTheme();\n    const iframeId =\n      'pioHomeIFrame-' +\n      crypto.createHash('sha1').update(crypto.randomBytes(512)).digest('hex');\n    const iframeScript = `\n<script>\n  for (const command of ['selectAll', 'copy', 'paste', 'cut', 'undo', 'redo']) {\n    document.addEventListener(command, (e) => {\n      document.getElementById('${iframeId}').contentWindow.postMessage({'command': 'execCommand', 'data': command}, '*');\n    });\n  }\n  window.addEventListener('message', (e) => {\n    if (e.data.command === 'kbd-event') {\n      window.dispatchEvent(new KeyboardEvent('keydown', e.data.data));\n    }\n  });\n</script>\n  `;\n    return `<!DOCTYPE html>\n      <html lang=\"en\">\n      <head>${IS_OSX ? iframeScript : ''}</head>\n      <body style=\"margin: 0; padding: 0; height: 100%; overflow: hidden; background-color: ${\n        theme === 'light' ? '#FFF' : '#1E1E1E'\n      }\">\n        <iframe id=\"${iframeId}\" src=\"${pioNodeHelpers.home.getFrontendUrl({\n      start: startUrl,\n      theme,\n      workspace: extension.getEnterpriseSetting('defaultPIOHomeWorkspace'),\n    })}\"\n          width=\"100%\"\n          height=\"100%\"\n          frameborder=\"0\"\n          style=\"border: 0; left: 0; right: 0; bottom: 0; top: 0; position:absolute;\" />\n      </body>\n      </html>\n    `;\n  }\n\n  async onIDECommand(command, params) {\n    switch (command) {\n      case 'open_project':\n        return this.onOpenProjectCommand(params);\n      case 'open_text_document':\n        return await this.onOpenTextDocumentCommand(params);\n      case 'get_pio_project_dirs':\n        return this.onGetPIOProjectDirs();\n    }\n  }\n\n  onOpenProjectCommand(params) {\n    if (extension.projectObservable) {\n      extension.projectObservable.saveProjectStateItem(\n        vscode.Uri.file(params).fsPath,\n        'activeEnv',\n        undefined\n      );\n      extension.projectObservable.switchToProject(vscode.Uri.file(params).fsPath);\n    }\n    this.disposePanel();\n    if (vscode.workspace.workspaceFolders) {\n      vscode.workspace.updateWorkspaceFolders(\n        vscode.workspace.workspaceFolders.length,\n        null,\n        { uri: vscode.Uri.file(params) }\n      );\n    } else {\n      vscode.commands.executeCommand('vscode.openFolder', vscode.Uri.file(params));\n    }\n    vscode.commands.executeCommand('workbench.view.explorer');\n    return true;\n  }\n\n  async onOpenTextDocumentCommand(params) {\n    const editor = await vscode.window.showTextDocument(vscode.Uri.file(params.path));\n    const gotoPosition = new vscode.Position(\n      (params.line || 1) - 1,\n      (params.column || 1) - 1\n    );\n    editor.selection = new vscode.Selection(gotoPosition, gotoPosition);\n    editor.revealRange(\n      new vscode.Range(gotoPosition, gotoPosition),\n      vscode.TextEditorRevealType.InCenter\n    );\n    return true;\n  }\n\n  onGetPIOProjectDirs() {\n    return ProjectObservable.getPIOProjectDirs();\n  }\n\n  onPanelDisposed() {\n    this._currentPanel = undefined;\n  }\n\n  disposePanel() {\n    if (!this._currentPanel) {\n      return;\n    }\n    this._currentPanel.dispose();\n    this._currentPanel = undefined;\n  }\n\n  dispose() {\n    this.disposePanel();\n    pioNodeHelpers.misc.disposeSubscriptions(this.subscriptions);\n    pioNodeHelpers.home.shutdownServer();\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport vscode from 'vscode';\n\nexport default class PIOTerminal {\n  constructor() {\n    this._instance = undefined;\n  }\n\n  new() {\n    const envClone = Object.create(process.env);\n    if (process.env.PLATFORMIO_PATH) {\n      envClone.PATH = process.env.PLATFORMIO_PATH;\n      envClone.Path = process.env.PLATFORMIO_PATH;\n    }\n    return vscode.window.createTerminal({\n      name: 'PlatformIO CLI',\n      env: envClone,\n    });\n  }\n\n  sendText(text) {\n    if (!this._instance || this._instance.exitStatus !== undefined) {\n      this._instance = this.new();\n    }\n    this._instance.sendText(text);\n    this._instance.show();\n  }\n\n  dispose() {\n    if (this._instance) {\n      this._instance.dispose();\n    }\n    this._instance = undefined;\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as vscode from 'vscode';\n\nclass QuickItem extends vscode.TreeItem {\n  constructor(label, command, args, collapsibleState, children) {\n    super(label, collapsibleState);\n    if (command) {\n      this.command = {\n        title: label,\n        command,\n        arguments: args,\n      };\n    }\n    this.customChildren = children;\n  }\n}\n\nexport default class QuickAccessTreeProvider {\n  getChildren(element) {\n    if (element && element.customChildren) {\n      return element.customChildren;\n    }\n    return [\n      new QuickItem(\n        'PIO Home',\n        undefined,\n        undefined,\n        vscode.TreeItemCollapsibleState.Expanded,\n        [\n          new QuickItem('Open', 'platformio-ide.showHome'),\n          new QuickItem('PIO Account', 'platformio-ide.showHome', ['/account']),\n          new QuickItem('Inspect', 'platformio-ide.showHome', ['/inspect']),\n          new QuickItem('Projects & Configuration', 'platformio-ide.showHome', [\n            '/projects',\n          ]),\n          new QuickItem('Libraries', 'platformio-ide.showHome', ['/libraries']),\n          new QuickItem('Boards', 'platformio-ide.showHome', ['/boards']),\n          new QuickItem('Platforms', 'platformio-ide.showHome', ['/platforms']),\n          new QuickItem('Devices', 'platformio-ide.showHome', ['/device']),\n        ]\n      ),\n      new QuickItem(\n        'Debug',\n        undefined,\n        undefined,\n        vscode.TreeItemCollapsibleState.Expanded,\n        [\n          new QuickItem('Start Debugging', 'platformio-ide.startDebugging'),\n          new QuickItem('Toggle Debug Console', 'workbench.debug.action.toggleRepl'),\n        ]\n      ),\n      new QuickItem(\n        'Updates',\n        undefined,\n        undefined,\n        vscode.TreeItemCollapsibleState.Expanded,\n        [\n          new QuickItem('Library Updates', 'platformio-ide.showHome', [\n            '/libraries/updates',\n          ]),\n          new QuickItem('Platform Updates', 'platformio-ide.showHome', [\n            '/platforms/updates',\n          ]),\n          new QuickItem('Update All', 'platformio-ide.updateCore'),\n        ]\n      ),\n      new QuickItem(\n        'Miscellaneous',\n        undefined,\n        undefined,\n        vscode.TreeItemCollapsibleState.Expanded,\n        [\n          new QuickItem('PlatformIO Core CLI', 'platformio-ide.openPIOCoreCLI'),\n          new QuickItem('Clone Git Project', 'git.clone'),\n          new QuickItem('New Terminal', 'platformio-ide.newTerminal'),\n          new QuickItem('Upgrade PlatformIO Core', 'platformio-ide.upgradeCore'),\n        ]\n      ),\n    ];\n  }\n\n  getTreeItem(element) {\n    return element;\n  }\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport * as misc from './misc';\nimport * as pioNodeHelpers from 'platformio-node-helpers';\nimport * as piodebug from 'platformio-vscode-debug';\nimport * as utils from './utils';\n\nimport InstallationManager from './installer/manager';\nimport PIOHome from './home';\nimport PIOTerminal from './terminal';\nimport ProjectObservable from './project/observable';\nimport QuickAccessTreeProvider from './views/quick-access-tree';\nimport { STATUS_BAR_PRIORITY_START } from './constants';\nimport StateStorage from './state-storage';\nimport fs from 'fs-plus';\nimport vscode from 'vscode';\n\nclass PlatformIOVSCodeExtension {\n  constructor() {\n    this.context = undefined;\n    this.pioTerm = undefined;\n    this.pioHome = undefined;\n    this.projectObservable = undefined;\n    this.subscriptions = [];\n\n    this._enterpriseSettings = undefined;\n  }\n\n  async activate(context) {\n    this.context = context;\n    this.stateStorage = new StateStorage(context.globalState);\n    this.pioHome = new PIOHome();\n    this.pioTerm = new PIOTerminal();\n\n    this.subscriptions.push(this.pioHome, this.pioTerm);\n\n    const hasPIOProject = ProjectObservable.getPIOProjectDirs().length > 0;\n    if (!hasPIOProject && this.getSetting('activateOnlyOnPlatformIOProject')) {\n      return;\n    }\n\n    // temporary workaround for https://github.com/Microsoft/vscode/issues/58348\n    if (\n      !vscode.workspace\n        .getConfiguration('extensions')\n        .has('showRecommendationsOnlyOnDemand')\n    ) {\n      vscode.workspace\n        .getConfiguration('extensions')\n        .update('showRecommendationsOnlyOnDemand', true);\n    }\n\n    this.patchOSEnviron();\n    await this.startInstaller(!hasPIOProject);\n    this.subscriptions.push(this.handleUseDevelopmentPIOCoreConfiguration());\n\n    vscode.commands.executeCommand('setContext', 'pioCoreReady', true);\n    if (typeof this.getEnterpriseSetting('onPIOCoreReady') === 'function') {\n      await this.getEnterpriseSetting('onPIOCoreReady')();\n    }\n\n    this.subscriptions.push(\n      vscode.window.registerTreeDataProvider(\n        'platformio-activitybar.quickAccess',\n        new QuickAccessTreeProvider()\n      )\n    );\n\n    this.registerGlobalCommands();\n\n    if (!hasPIOProject) {\n      this.initToolbar({ filterCommands: ['platformio-ide.showHome'] });\n      return;\n    }\n\n    vscode.commands.executeCommand('setContext', 'pioProjectReady', true);\n\n    this.initDebug();\n    this.initToolbar({\n      ignoreCommands: this.getEnterpriseSetting('ignoreToolbarCommands'),\n    });\n    this.projectObservable = new ProjectObservable();\n    this.subscriptions.push(this.projectObservable);\n\n    this.startPIOHome();\n\n    misc.maybeRateExtension(this.stateStorage);\n    misc.warnAboutConflictedExtensions();\n    this.subscriptions.push(\n      vscode.window.onDidChangeActiveTextEditor((editor) =>\n        misc.warnAboutInoFile(editor, this.stateStorage)\n      )\n    );\n  }\n\n  getSetting(id) {\n    return vscode.workspace.getConfiguration('platformio-ide').get(id);\n  }\n\n  loadEnterpriseSettings() {\n    const ext = vscode.extensions.all.find(\n      (item) =>\n        item.id.startsWith('platformio.') &&\n        item.id !== 'platformio.platformio-ide' &&\n        item.isActive\n    );\n    return ext && ext.exports ? ext.exports.settings : undefined;\n  }\n\n  getEnterpriseSetting(id, defaultValue = undefined) {\n    if (!this._enterpriseSettings) {\n      this._enterpriseSettings = this.loadEnterpriseSettings();\n    }\n    if (this._enterpriseSettings && id in this._enterpriseSettings) {\n      return this._enterpriseSettings[id];\n    }\n    return defaultValue;\n  }\n\n  patchOSEnviron() {\n    const extraVars = {\n      PLATFORMIO_IDE: utils.getIDEVersion(),\n    };\n    // handle HTTP proxy settings\n    const http_proxy = vscode.workspace.getConfiguration('http').get('proxy');\n    if (http_proxy && !process.env.HTTP_PROXY && !process.env.http_proxy) {\n      extraVars['HTTP_PROXY'] = http_proxy;\n    }\n    if (!vscode.workspace.getConfiguration('http').get('proxyStrictSSL')) {\n      // https://stackoverflow.com/questions/48391750/disable-python-requests-ssl-validation-for-an-imported-module\n      extraVars['CURL_CA_BUNDLE'] = '';\n    }\n    if (http_proxy && !process.env.HTTPS_PROXY && !process.env.https_proxy) {\n      extraVars['HTTPS_PROXY'] = http_proxy;\n    }\n    if (this.getSetting('customPyPiIndexUrl')) {\n      extraVars['PIP_INDEX_URL'] = this.getSetting('customPyPiIndexUrl');\n    }\n    pioNodeHelpers.proc.patchOSEnviron({\n      caller: 'vscode',\n      extraPath: this.getSetting('customPATH'),\n      extraVars,\n    });\n  }\n\n  async startInstaller(disableAutoUpdates) {\n    const im = new InstallationManager(this.context.globalState, disableAutoUpdates);\n    if (im.locked()) {\n      vscode.window.showInformationMessage(\n        'PlatformIO IDE installation has been suspended, because PlatformIO ' +\n          'IDE Installer is already started in another window.'\n      );\n      return;\n    }\n    const doInstall = await vscode.window.withProgress(\n      {\n        location: vscode.ProgressLocation.Window,\n        title: 'PlatformIO',\n      },\n      async (progress) => {\n        progress.report({\n          message: 'Checking PlatformIO Core installation...',\n        });\n        try {\n          return !(await im.check());\n        } catch (err) {}\n        return true;\n      }\n    );\n\n    if (!doInstall) {\n      return;\n    }\n\n    return await vscode.window.withProgress(\n      {\n        location: vscode.ProgressLocation.Notification,\n        title: 'PlatformIO Installer',\n      },\n      async (progress) => {\n        progress.report({\n          message: 'Installing PlatformIO IDE...',\n        });\n        const outputChannel = vscode.window.createOutputChannel(\n          'PlatformIO Installation'\n        );\n        outputChannel.show();\n        outputChannel.appendLine('Installing PlatformIO IDE...');\n        outputChannel.appendLine(\n          'It may take a few minutes depending on your connection speed'\n        );\n        outputChannel.appendLine(\n          'Please do not close this window and do not ' +\n            'open other folders until this process is completed.'\n        );\n        outputChannel.appendLine(\n          '\\nDebugging information is available via VSCode > Help > Toggle Developer Tools > Console.'\n        );\n\n        try {\n          im.lock();\n          await im.install(progress);\n          outputChannel.appendLine('PlatformIO IDE installed successfully.\\n');\n          outputChannel.appendLine('Please restart VSCode.');\n          const action = 'Reload Now';\n          const selected = await vscode.window.showInformationMessage(\n            'PlatformIO IDE has been successfully installed! Please reload window',\n            action\n          );\n          if (selected === action) {\n            vscode.commands.executeCommand('workbench.action.reloadWindow');\n          }\n        } catch (err) {\n          outputChannel.appendLine('Failed to install PlatformIO IDE.');\n          utils.notifyError('Installation Manager', err);\n        } finally {\n          im.unlock();\n        }\n\n        im.destroy();\n        return true;\n      }\n    );\n  }\n\n  async startPIOHome() {\n    if (\n      this.getSetting('disablePIOHomeStartup') ||\n      !pioNodeHelpers.home.showAtStartup('vscode')\n    ) {\n      return;\n    }\n    vscode.commands.executeCommand('platformio-ide.showHome');\n  }\n\n  registerGlobalCommands() {\n    this.subscriptions.push(\n      vscode.commands.registerCommand('platformio-ide.showHome', (startUrl) =>\n        this.pioHome.toggle(startUrl)\n      ),\n      vscode.commands.registerCommand('platformio-ide.newTerminal', () =>\n        this.pioTerm.new().show()\n      ),\n      vscode.commands.registerCommand('platformio-ide.openPIOCoreCLI', () =>\n        this.pioTerm.sendText('pio --help')\n      ),\n      vscode.commands.registerCommand('platformio-ide.startDebugging', () => {\n        vscode.commands.executeCommand('workbench.view.debug');\n        vscode.commands.executeCommand('workbench.debug.action.toggleRepl');\n        vscode.commands.executeCommand('workbench.action.debug.start');\n      }),\n      vscode.commands.registerCommand('platformio-ide.updateGlobalLibs', () =>\n        this.pioTerm.sendText('pio lib --global update')\n      ),\n      vscode.commands.registerCommand('platformio-ide.updatePlatforms', () =>\n        this.pioTerm.sendText('pio platform update')\n      ),\n      vscode.commands.registerCommand('platformio-ide.updateCore', () =>\n        this.pioTerm.sendText('pio update')\n      ),\n      vscode.commands.registerCommand('platformio-ide.upgradeCore', () =>\n        this.pioTerm.sendText('pio upgrade')\n      )\n    );\n  }\n\n  initDebug() {\n    piodebug.activate(this.context);\n  }\n\n  initToolbar({ filterCommands, ignoreCommands }) {\n    if (this.getSetting('disableToolbar')) {\n      return;\n    }\n    [\n      ['$(home)', 'PlatformIO: Home', 'platformio-ide.showHome'],\n      ['$(check)', 'PlatformIO: Build', 'platformio-ide.build'],\n      ['$(arrow-right)', 'PlatformIO: Upload', 'platformio-ide.upload'],\n      ['$(trashcan)', 'PlatformIO: Clean', 'platformio-ide.clean'],\n      ['$(plug)', 'PlatformIO: Serial Monitor', 'platformio-ide.serialMonitor'],\n      ['$(terminal)', 'PlatformIO: New Terminal', 'platformio-ide.newTerminal'],\n    ]\n      .filter(\n        (item) =>\n          (!filterCommands || filterCommands.includes(item[2])) &&\n          (!ignoreCommands || !ignoreCommands.includes(item[2]))\n      )\n      .reverse()\n      .forEach((item, index) => {\n        const [text, tooltip, command] = item;\n        const sbItem = vscode.window.createStatusBarItem(\n          'pio-toolbar',\n          vscode.StatusBarAlignment.Left,\n          STATUS_BAR_PRIORITY_START + index + 1\n        );\n        sbItem.name = 'PlatformIO: Toolbar';\n        sbItem.text = text;\n        sbItem.tooltip = tooltip;\n        sbItem.command = command;\n        sbItem.show();\n        this.subscriptions.push(sbItem);\n      });\n  }\n\n  handleUseDevelopmentPIOCoreConfiguration() {\n    return vscode.workspace.onDidChangeConfiguration((e) => {\n      if (\n        !e.affectsConfiguration('platformio-ide.useDevelopmentPIOCore') ||\n        !this.getSetting('useBuiltinPIOCore')\n      ) {\n        return;\n      }\n      const envDir = pioNodeHelpers.core.getEnvDir();\n      if (!envDir || !fs.isDirectorySync(envDir)) {\n        return;\n      }\n      pioNodeHelpers.home.shutdownServer();\n      const delayedJob = () => {\n        try {\n          fs.removeSync(envDir);\n        } catch (err) {\n          console.warn(err);\n        }\n        vscode.window.showInformationMessage(\n          'Please restart VSCode to apply the changes.'\n        );\n      };\n      setTimeout(delayedJob, 2000);\n    });\n  }\n\n  disposeLocalSubscriptions() {\n    vscode.commands.executeCommand('setContext', 'pioCoreReady', false);\n    pioNodeHelpers.misc.disposeSubscriptions(this.subscriptions);\n  }\n\n  deactivate() {\n    this.disposeLocalSubscriptions();\n  }\n}\n\nexport const extension = new PlatformIOVSCodeExtension();\n\nexport function activate(context) {\n  extension.activate(context);\n  return extension;\n}\n\nexport function deactivate() {\n  extension.deactivate();\n  piodebug.deactivate();\n}\n","/**\n * Copyright (c) 2017-present PlatformIO <contact@platformio.org>\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n */\n\nimport { CONFLICTED_EXTENSION_IDS } from './constants';\nimport vscode from 'vscode';\n\nexport async function maybeRateExtension(stateStorage) {\n  const stateKey = 'rate-extension';\n  const askAfterSessionNums = 13;\n  let state = stateStorage.getValue(stateKey);\n  if (state && state.done) {\n    return;\n  } else if (!state || !state.callCounter) {\n    state = {\n      callCounter: 0,\n      done: false,\n    };\n  }\n\n  state.callCounter += 1;\n  if (state.callCounter < askAfterSessionNums) {\n    stateStorage.setValue(stateKey, state);\n    return;\n  }\n\n  const selectedItem = await vscode.window.showInformationMessage(\n    'If you enjoy using PlatformIO IDE for VSCode, would you mind taking a moment to rate it? ' +\n      'It will not take more than one minute. Thanks for your support!',\n    { title: 'Rate PlatformIO IDE Extension', isCloseAffordance: false },\n    { title: 'Remind later', isCloseAffordance: false },\n    { title: 'No, Thanks', isCloseAffordance: true }\n  );\n\n  switch (selectedItem ? selectedItem.title : undefined) {\n    case 'Rate PlatformIO IDE Extension':\n      vscode.commands.executeCommand(\n        'vscode.open',\n        vscode.Uri.parse('http://bit.ly/pio-vscode-rate')\n      );\n      state.done = true;\n      break;\n    case 'No, Thanks':\n      state.done = true;\n      break;\n    default:\n      state.callCounter = 0;\n  }\n  stateStorage.setValue(stateKey, state);\n}\n\nexport async function warnAboutConflictedExtensions() {\n  const conflicted = vscode.extensions.all.filter(\n    (ext) => ext.isActive && CONFLICTED_EXTENSION_IDS.includes(ext.id)\n  );\n  if (conflicted.length === 0) {\n    return;\n  }\n  const selectedItem = await vscode.window.showWarningMessage(\n    `Conflicted extensions with IntelliSense service were detected (${conflicted\n      .map((ext) => ext.packageJSON.displayName || ext.id)\n      .join(', ')}). ` +\n      'Code-completion, linting and navigation will not work properly. ' +\n      'Please disable or uninstall them (Menu > View > Extensions).',\n    { title: 'More details', isCloseAffordance: false },\n    { title: 'Uninstall conflicted', isCloseAffordance: false },\n    { title: 'Remind later', isCloseAffordance: true }\n  );\n  switch (selectedItem ? selectedItem.title : undefined) {\n    case 'More details':\n      vscode.commands.executeCommand(\n        'vscode.open',\n        vscode.Uri.parse('http://bit.ly/pio-vscode-conflicted-extensions')\n      );\n      break;\n    case 'Uninstall conflicted':\n      conflicted.forEach((ext) => {\n        vscode.commands.executeCommand(\n          'workbench.extensions.uninstallExtension',\n          ext.id\n        );\n      });\n      vscode.commands.executeCommand('workbench.action.reloadWindow');\n      break;\n  }\n}\n\nexport async function warnAboutInoFile(editor, stateStorage) {\n  if (!editor || !editor.document || !editor.document.fileName) {\n    return;\n  }\n  if (!editor.document.fileName.endsWith('.ino')) {\n    return;\n  }\n  const stateKey = 'ino-warn-disabled';\n  if (stateStorage.getValue(stateKey)) {\n    return;\n  }\n\n  const selectedItem = await vscode.window.showWarningMessage(\n    'C/C++ IntelliSense service does not support .INO files. ' +\n      'It might lead to the spurious problems with code completion, linting, and debugging. ' +\n      'Please convert .INO sketch into the valid .CPP file.',\n    { title: 'Show instruction', isCloseAffordance: false },\n    { title: 'Do not show again', isCloseAffordance: false },\n    { title: 'Remind later', isCloseAffordance: true }\n  );\n  switch (selectedItem ? selectedItem.title : undefined) {\n    case 'Show instruction':\n      vscode.commands.executeCommand(\n        'vscode.open',\n        vscode.Uri.parse('http://bit.ly/ino2cpp')\n      );\n      break;\n    case 'Do not show again':\n      stateStorage.setValue(stateKey, 1);\n      break;\n  }\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","IS_WINDOWS","process","platform","startsWith","IS_OSX","CONFLICTED_EXTENSION_IDS","require","async","notifyError","title","err","description","stack","toString","ghbody","vscode","getIDEVersion","os","reportUrl","pioNodeHelpers","action","includes","substring","console","error","packageJSON","version","PythonPrompt","selectedItem","isCloseAffordance","pythonExecutable","result","status","this","STATUS_TRY_AGAIN","undefined","prompt","placeHolder","validateInput","fs","STATUS_CUSTOMEXE","STATUS_ABORT","StateStorage","constructor","globalState","stateKey","_globalState","_stateKey","getState","getValue","setValue","data","update","InstallationManager","disableAutoUpdates","stateStorage","STORAGE_STATE_KEY","config","stages","onDidStatusChange","bind","pioCoreVersionSpec","useBuiltinPython","useBuiltinPIOCore","useDevelopmentPIOCore","pythonPrompt","locked","lock","LOCK_KEY","Date","getTime","unlock","lockTime","parseInt","LOCK_TIMEOUT","stage","check","warn","progress","stageIncrementTotal","length","install","message","increment","report","destroy","map","ProjectTasksTreeProvider","id","envs","tasks","activeEnvName","multiEnvProject","getTreeItem","item","taskToTreeItem","task","treeItem","name","iconPath","tooltip","command","arguments","coreEnv","multienv","label","getChildren","element","group","getEnvGroupChildren","env","getEnvChildren","getRootChildren","envName","DEFAULT_ENV_NAME","push","filter","envTasks","getTaskGroups","candidates","ProjectTaskManager","projectDir","projectObserver","subscriptions","_sid","Math","random","_refreshTimeout","_restoreOnDidEndTask","_tasksToRestore","refresh","dispose","requestRefresh","clearTimeout","setTimeout","AUTO_REFRESH_DELAY","force","resetCache","projectEnvs","getProjectEnvs","projectTasks","getDefaultTasks","getLoadedEnvTasks","taskViewer","TASKS_VIEW_ID","treeDataProvider","getActiveEnvName","showCollapseAll","onDidExpandElement","onDidRequestEnvTasks","PROVIDER_TYPE","provideTasks","toVSCodeTask","resolveTask","event","onDidEndTaskProcess","registerTaskBasedCommands","loadEnvTasks","projectTask","envClone","create","PLATFORMIO_PATH","PATH","Path","vscodeTask","type","args","cwd","presentationOptions","panel","isBuild","isClean","isTest","runTask","_autoCloseSerialMonitor","some","t","isMonitorAndUploadTask","extension","getSetting","arg","every","execution","areTasksEqual","terminate","exitCode","pop","task1","task2","_runTask","ProjectObservable","_persistentState","context","_taskManager","_sbEnvSwitcher","_pool","ide","api","createFileSystemWatcher","createDirSystemWatcher","dir","path","withIndexRebuildingProgress","location","viewId","withTasksLoadingProgress","onDidChangeProjectConfig","saveActiveProjectState","onDidNotifyError","settings","autoPreloadEnvTasks","autoRebuild","getActiveEditorProjectDir","switchToProject","findActiveProjectDir","getActiveObserver","rebuildIndex","registerEnvSwitcher","folder","uri","fsPath","isPIOProjectSync","getSelectedProjectDir","pioProjectDirs","getPIOProjectDirs","currentActiveDir","getActiveProjectDir","find","lastActiveDir","editor","resource","document","scheme","loadProjectStateItem","saveProjectStateItem","projects","keys","observer","options","currentProjectDir","currentEnvName","text","getObserver","switchProjectEnv","switch","updateEnvSwitcher","show","pickProjectEnv","items","shortProjectDir","pickedItem","matchOnDescription","PIOHome","_currentPanel","_lastStartUrl","defaultStartUrl","disposePanel","startUrl","column","webview","html","getWebviewContent","reveal","newPanel","getEnterpriseSetting","enableScripts","retainContextWhenHidden","onDidDispose","onPanelDisposed","extensionPath","getLoadingContent","getTheme","colorTheme","toLowerCase","port","host","onIDECommand","theme","iframeId","crypto","digest","start","workspace","params","onOpenProjectCommand","onOpenTextDocumentCommand","onGetPIOProjectDirs","projectObservable","gotoPosition","line","selection","revealRange","PIOTerminal","_instance","new","sendText","exitStatus","QuickItem","collapsibleState","children","super","customChildren","QuickAccessTreeProvider","pioTerm","pioHome","_enterpriseSettings","hasPIOProject","has","patchOSEnviron","startInstaller","handleUseDevelopmentPIOCoreConfiguration","registerGlobalCommands","initDebug","initToolbar","ignoreCommands","startPIOHome","state","done","callCounter","misc","conflicted","ext","isActive","displayName","join","forEach","fileName","endsWith","filterCommands","loadEnterpriseSettings","defaultValue","extraVars","PLATFORMIO_IDE","utils","http_proxy","HTTP_PROXY","HTTPS_PROXY","https_proxy","caller","extraPath","im","outputChannel","appendLine","toggle","piodebug","reverse","index","sbItem","e","affectsConfiguration","envDir","disposeLocalSubscriptions","deactivate","activate"],"sourceRoot":""}